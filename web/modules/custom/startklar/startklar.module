<?php

use Drupal\user\Entity\User;

/**
 * Implements hook_mail().
 */
function startklar_mail($key, &$message, $params) {
  switch ($key) {
    case "faq":
      $message['subject'] = 'Frage Ã¼ber Startklar wurde gestellt';
      $message['body'][] = $params['body'];

      break;
  }
}

/**
 * Implements hook_node_access_records().
 */
function startklar_node_access_records(\Drupal\node\NodeInterface $node) {
  $grants = [];

  if ($node->bundle() == 'group') {
    if ($node->get('field_dv')->entity) {
      _startklar_add_grants_by_group($node, $node, $grants);
    }
  }

  if ($node->bundle() == 'person') {
    $group = _startklar_get_group_by_person($node);
    $helfer = _startklar_get_helfer_by_person($node);

    if (!$group && !$helfer) {
      \Drupal::logger('startklar')
        ->error('Cannot load group or helfer for person ' . $node->id() . ' to generate access records');
    } else {
      if ($group) {
        _startklar_add_grants_by_group($group, $node, $grants);
      }
      if ($helfer) {
        _startklar_add_grants_for_helfer($node, $grants);
      }
    }
  }

  if ($node->bundle() == 'anreise') {
    $group = _startklar_get_group_by_anreise($node);

    if (!$group) {
      $person = _startklar_get_person_by_anreise($node);

      if ($person) {
        $group = _startklar_get_group_by_person($person);
        $helfer = _startklar_get_helfer_by_person($person);
      }
    }

    if (!$group && !$helfer) {
      \Drupal::logger('startklar')
        ->error('Cannot load group or helfer for anreise ' . $node->id() . ' to generate access records');
    } else {
      if ($group) {
        _startklar_add_grants_by_group($group, $node, $grants);
      }
      if ($helfer) {
        _startklar_add_grants_for_helfer($node, $grants);
      }
    }
  }

  \Drupal::logger('startklar_permissions')->debug($node->id() . ': ' . print_r($grants, TRUE));

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function startklar_node_grants(\Drupal\Core\Session\AccountInterface $account, $op) {
  $grants = [];

  $user = User::load($account->id());

  foreach ($user->get('field_manage_dvs') as $fieldItem) {
    $grants['startklar_dv'][] = $fieldItem->target_id;
  }

  if (in_array('helferverwaltung', $account->getRoles())) {
    $grants['startklar_helfer'][] = 0;
  }

  return $grants;
}

function _startklar_add_grants_by_group(\Drupal\node\NodeInterface $group, \Drupal\node\NodeInterface $node, &$grants) {
  if ($group->get('field_dv')->entity) {
    $dvId = $group->get('field_dv')->entity->id();

    $grants[] = [
      'realm' => 'startklar_dv',
      'gid' => $dvId,
      'grant_view' => $node->isPublished(),
      'grant_update' => 0,
      'grant_delete' => 0,
    ];
  }
}

function _startklar_add_grants_for_helfer(\Drupal\node\NodeInterface $node, &$grants) {
    $grants[] = [
      'realm' => 'startklar_helfer',
      'gid' => 0,
      'grant_view' => $node->isPublished(),
      'grant_update' => 0,
      'grant_delete' => 0,
    ];
}

function _startklar_get_group_by_person(\Drupal\node\NodeInterface $person) {
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

  $result = $nodeStorage->getQuery()
    ->condition('type', 'group')
    ->condition('field_teilnehmer', $person->id(), 'CONTAINS')
    ->accessCheck(FALSE)
    ->execute();

  if (count($result) > 0) {
    return $nodeStorage->load(reset($result));
  }

  return false;
}



function _startklar_get_helfer_by_person(\Drupal\node\NodeInterface $person) {
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

  $result = $nodeStorage->getQuery()
    ->condition('type', 'helfer')
    ->condition('field_person', $person->id())
    ->accessCheck(FALSE)
    ->execute();

  if (count($result) > 0) {
    return $nodeStorage->load(reset($result));
  }

  return false;
}

function _startklar_get_person_by_anreise(\Drupal\node\NodeInterface $anreise) {
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

  $result = $nodeStorage->getQuery()
    ->condition('type', 'person')
    ->condition('field_anreise', $anreise->id())
    ->accessCheck(FALSE)
    ->execute();

  if (count($result) > 0) {
    return $nodeStorage->load(reset($result));
  }

  return false;
}

function _startklar_get_group_by_anreise(\Drupal\node\NodeInterface $anreise) {
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

  $result = $nodeStorage->getQuery()
    ->condition('type', 'group')
    ->condition('field_anreise', $anreise->id())
    ->accessCheck(FALSE)
    ->execute();

  if (count($result) > 0) {
    return $nodeStorage->load(reset($result));
  }

  return false;
}


/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function startklar_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === 'node' && $bundle === 'workshop') {
    $fieldNames = [
      'field_zeit',
      'field_workshop_vorschaubild',
      'body',
    ];

    foreach ($fieldNames as $fieldName) {
      if (isset($fields[$fieldName])) {
        $fields[$fieldName]->addConstraint('NotEmptyWhenPublished', []);
      }
    }

    if (isset($fields['body'])) {
      $fields['body']->addConstraint('SummaryRequiredWhenPublished', []);
    }
  }
}
